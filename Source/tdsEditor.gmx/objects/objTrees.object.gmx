<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTree</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Trees Initialization

treesInit();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Player Position

var _canCheckPlayer = instance_exists(objPlayer);
if (_canCheckPlayer)
    {
        var xPlayerDistance = abs(objPlayer.x - room_width / windDistanceFactor);
        var yPlayerDistance = abs(objPlayer.y - room_height / windDistanceFactor);
        var interpAmount = clamp((xPlayerDistance + yPlayerDistance) / windDistanceMax, windMin, windMax);
        
        audio_sound_gain(windSound, interpAmount, 0);
    }
    
var randomTree = irandom(treeCount);
part_particles_create(partSys, xPos[randomTree], yPos[randomTree], pType[particleTypes.Leaves], irandom(2))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Trees

if (keyboard_check(vk_shift))
    {
        if (keyboard_check(vk_control))
            {
                if (debugMode)
                    {
                        exit;
                    }
            }
    }
for (var i = 0; i &lt; treeCount; i ++)
    {
        treeAngle[i] = sin_move(-6, 6, treeAngleTime[i], treeAngleOffset[i]);
    }
    
if (oldSystem)
    {
        for (var i = 0; i &lt; treeCount; i ++)
            {
                draw_sprite_ext(sprite_index, image_index, xPos[i], yPos[i], Scale[i], Scale[i], treeAngle[i], c_white, 1);
                draw_sprite_ext(sprite_index, image_index, xPos[i], yPos[i], Scale[i] * subScale, Scale[i] * subScale, treeAngle[i] * subAngleFactor, c_white, 1);
            }
    }
else
    {
        var canPlayerCheck = instance_exists(objPlayer);

        for (var i = 0; i &lt; treeCount; i ++)
            {
                if (canPlayerCheck)
                    {
                        if (point_distance(xPos[i], yPos[i], objPlayer.x, objPlayer.y) &lt;= (viewDistance))
                            {
                                draw_sprite_ext(sprite_index, image_index, xPos[i], yPos[i], Scale[i], Scale[i], treeAngle[i], c_white, 1);
                                draw_sprite_ext(sprite_index, image_index, xPos[i], yPos[i], Scale[i] * subScale, Scale[i] * subScale, treeAngle[i] * subAngleFactor, c_white, 1);
                            }
                    }
            }
    }
    
var canSpawnCicada = (within_range(global.timeHours, 20, 24) or (within_range(global.timeHours, 0, 4)));
    
if (canSpawnCicada) or (global.playCicada)
    {
        cicadaTimer = max(cicadaTimer - 1, 0);
        if (cicadaTimer &lt;= 0) or ((global.playCicada))
            {
                cicadaTimer = round(cicadaTimerMax * random_range(0.95, 1.5));
                var randomTree = irandom(treeCount);
                audio_play_sound_at(sndCicada, xPos[randomTree], yPos[randomTree], 0, 160, 640, 1, false, 1);
                clAddMessage("Playing Cicada noise at (" + string(xPos[randomTree]) + ", " + string(yPos[randomTree]) + "). Next Cicada is spawning in " + string(cicadaTimer div room_speed) + " seconds.");
                
                global.playCicada = false;
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
