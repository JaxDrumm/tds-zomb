<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if Scaled

if (os_browser != browser_not_a_browser)
    {
        scale_canvas(1280, 720, browser_width - 32, browser_height - 32, true);
    }
    
alarm[1] = room_speed * 0.2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center

window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Variables

lastBrowserWidth = browser_width;
lastBrowserHeight = browser_height;

if (keyboard_check_pressed(vk_f12))
    {
        var resourceCounts = gameGetResourceCounts();
        var spriteCount = string(resourceCounts[0]);
        var soundCount = string(resourceCounts[1]);
        var scriptCount = string(resourceCounts[2]);
        var objectCount = string(resourceCounts[3]);
        var roomCount = string(resourceCounts[4]);

        var resourceString = "Number of Resources: Sprites - " + spriteCount + ". Scripts - " + scriptCount + ". Objects - " + objectCount + ". Rooms - " + roomCount + ".";
        show_message_async(gameDemoDisclaimer + "#" + resourceString + "#" + gameVersion);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Surface

Surface = surface_create(surface_get_width(application_surface), surface_get_height(application_surface));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

BktGlitch_init();
gameInit();
gameInitParticles();

event_user(0);

lastBrowserWidth = browser_width;
lastBrowserHeight = browser_height;

alarm[1] = room_speed * 3;

xPos = 0.5;
yPos = 0.5;

global.motionBlurQuality = 16;
global.motionBlurIntensity = 0.7;
global.motionBlurMax = 0.25;

xViewLast = view_xview;
yViewLast = view_yview;

shaderQuality = 2;
shaderIndex[2] = shdMain3;
shaderIndex[1] = shdMain2;
shaderIndex[0] = shdMain1;

uniSettings[2] = shader_get_uniform(shdMain3, "u_settings");
uniColour[2] = shader_get_uniform(shdMain3, "u_vignette_colour");
randomPosition[2] = shader_get_uniform(shdMain3, "random_pos");
mbQuality[2] = shader_get_uniform(shdMain3, "Quality");
uPoss[2] = shader_get_uniform(shdMain3, "poss");//uniform for x,y

uniSettings[1] = shader_get_uniform(shdMain2, "u_settings");
uniColour[1] = shader_get_uniform(shdMain2, "u_vignette_colour");
randomPosition[1] = shader_get_uniform(shdMain2, "random_pos");
mbQuality[1] = shader_get_uniform(shdMain2, "Quality");
uPoss[1] = shader_get_uniform(shdMain2, "poss");//uniform for x,y

uniSettings[0] = shader_get_uniform(shdMain1, "u_settings");
uniColour[0] = shader_get_uniform(shdMain1, "u_vignette_colour");
randomPosition[0] = shader_get_uniform(shdMain1, "random_pos");
mbQuality[0] = shader_get_uniform(shdMain1, "Quality");
uPoss[0] = shader_get_uniform(shdMain1, "poss");//uniform for x,y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Shader and Draw

var Width = display_get_gui_width();
var Height = display_get_gui_height();
var aWidth = surface_get_width(application_surface);
var aHeight = surface_get_height(application_surface);
var xScale = Width / aWidth;
var yScale = Height / aHeight;

var smallRadius = lerp(0.75, 1.5, healthScale);
var largeRadius = lerp(1.5, 2.5, healthScale);
var noiseStrength = lerp(0.85, 0.1, healthScale);
var colourMultiplier = lerp(0.2, 1, healthScale);

//var subSurface = surface_create(Width, Height);

shaderQuality = clamp(shaderQuality, 0, 2);
global.motionBlurQuality = clamp(global.motionBlurQuality, 1, 254);
global.motionBlurIntensity = clamp(global.motionBlurIntensity, 0, 2);
global.motionBlurMax = clamp(global.motionBlurMax, 0, 20);

if !(keyboard_check(vk_shift) and keyboard_check(vk_control) and debugMode)
    {
    
        var motionBlurThreshold = 0;
        var motionBlurFactor = 0.70;
        var xDifference = clamp((view_xview - xViewLast) / (view_wview / global.motionBlurIntensity), global.motionBlurMax * -1, global.motionBlurMax);
        var yDifference = clamp((view_yview - yViewLast) / (view_hview / global.motionBlurIntensity), global.motionBlurMax * -1, global.motionBlurMax);
        
        if (abs(xDifference) &lt; motionBlurThreshold)
            {
                xDifference = 0;
            }
        if (abs(yDifference) &lt; motionBlurThreshold)
            {
                yDifference = 0;
            }
            
        var xPos = xDifference + 0.5;
        var yPos = yDifference + 0.5;
    
        //Draw with Vignette + Noise + Motion Blur
        shader_set(shaderIndex[shaderQuality]);
        shader_set_uniform_f(uniSettings[shaderQuality], smallRadius, largeRadius, noiseStrength, 1)
        shader_set_uniform_f(uniColour[shaderQuality], 128 * colourMultiplier, 128 * colourMultiplier, 128 * colourMultiplier);
        shader_set_uniform_f(randomPosition[shaderQuality], random_range(0.35, 0.5));
        shader_set_uniform_f(uPoss[shaderQuality], xPos, yPos);
        shader_set_uniform_f(mbQuality[shaderQuality], ceil(global.motionBlurQuality));
        draw_surface_ext(application_surface, 0, 0, xScale, yScale, 0, c_white, 1);
        shader_reset();
    }
else
    {
        draw_surface_ext(application_surface, 0, 0, xScale, yScale, 0, c_white, 1);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_font(fontDebug);
        draw_set_colour(c_dkgray);
        draw_text(6, 6, string(round(fps)) + " " + string(round(Frame)));
        draw_set_colour(c_white);
        draw_text(4, 4, string(round(fps)) + " " + string(round(Frame)));
    }
    
Frame += ((delta_time / 1000000) * room_speed);

xViewLast = view_xview;
yViewLast = view_yview;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
