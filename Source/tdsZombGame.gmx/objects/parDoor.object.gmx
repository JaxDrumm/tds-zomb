<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>parInteractable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

Open = false;
drawAngle = 0;
collisionAngle = 0;
openDirection = 1;
Name = "ERR";

enum doorType
    {
        Horizontal, Vertical
    }

switch (object_index)
    {
        case objWoodenDoorHorizontal:
            {
                Orientation = doorType.Horizontal;
                standardMask = maskDoorH;
                break;
            }
        case objWoodenDoorVertical:
            {
                Orientation = doorType.Vertical;
                standardMask = maskDoorV;
                break;
            }
    }

if (Orientation == doorType.Horizontal)
    y += sprite_height div 1;  
else if (Orientation == doorType.Vertical)
    x += sprite_width div 1;
    
xstart = x;
ystart = y;
xDraw = x;
yDraw = y;
openOffset = 8;
    
mask_index = standardMask;
    
x1Check = bbox_left;
y1Check = bbox_top;
x2Check = bbox_right;
y2Check = bbox_bottom;
    
debugDoor = false;
Sound = -1;
doorNoise[0] = sndDoor1;
doorNoise[1] = sndDoor2;

shadowDistance = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run Variables

collisionAngle = 90 * Open * openDirection;
mask_index = standardMask;

if Open
    Name = "CLOSE DOOR";
else
    Name = "OPEN DOOR";

image_angle = collisionAngle;
drawAngle = lerp(drawAngle, collisionAngle, 0.15);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swinging

var centerCheck = collision_rectangle(x1Check, y1Check, x2Check, y2Check, parActor, false, -1);

if !centerCheck
    {
        if (Orientation == doorType.Vertical)
            {
                y = ystart - (openOffset * (!Open));
            
                if (xInteract - x) &lt; 0
                    openDirection = 1;
                else
                    openDirection = -1;
            }
        
        else if (Orientation == doorType.Horizontal)
            {
                x = xstart - (openOffset * (!Open));
            
                if (yInteract - y) &gt; 0
                    openDirection = 1;
                else
                    openDirection = -1;
            }
        
        if Sound != -1
            audio_stop_sound(Sound);
    
        Sound = soundPlayRandomPitch(doorNoise[Open], 1, 1);
        
        Open = !Open;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self, Shadow

if (debugDoor)
    {
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, collisionAngle, c_red, image_alpha * 0.5);
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, drawAngle, c_yellow, 0.85);
        
        draw_set_alpha(0.5);
        draw_set_colour(c_blue);
        draw_rectangle_width(bbox_left, bbox_top, bbox_right, bbox_bottom, 2);
        draw_set_colour(c_green);
        draw_rectangle_width(x1Check, y1Check, x2Check, y2Check, sin_move(2, 4, 0.5, 0));
    }
else
    {
        draw_sprite_ext(sprite_index, image_index, xDraw + shadowDistance, yDraw + shadowDistance, image_xscale, image_yscale, drawAngle, c_black, image_alpha * 0.5);
        draw_sprite_ext(sprite_index, image_index, xDraw, yDraw, image_xscale, image_yscale, drawAngle, image_blend, 1);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
