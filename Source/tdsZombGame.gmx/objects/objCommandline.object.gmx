<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

keyboard_string = "";
currentText = "";
maxLength = 128;
Blink = "";
tBlink = true;
lastKeyboardString = keyboard_string;

alarm[0] = room_speed * 0.5;

respondAlarm = 0;
respondThreshold = 30;

Command[0] = "set";
Command[1] = "help";
Command[2] = "cicada";
Command[3] = "teleport";
Command[4] = "restart";
Command[5] = "quit";
Command[6] = "create";
Command[7] = "clear";
Command[8] = "debug_overlay";
Command[9] = "set_time";
Command[10] = "set_stat";
Command[11] = "set_global";
Command[12] = "shake";
Command[13] = "get_objects";
Command[14] = "spawn_weapon";
Command[15] = "reroll_weapons";
Command[16] = "window_size";
Command[17] = "ben_walker";
Command[18] = "play_ambient";

commandArgumentMin[0] = 3;
commandArgumentMin[1] = 0;
commandArgumentMin[2] = 0;
commandArgumentMin[3] = 2;
commandArgumentMin[4] = 0;
commandArgumentMin[5] = 0;
commandArgumentMin[6] = 4;
commandArgumentMin[7] = 0;
commandArgumentMin[8] = 2;
commandArgumentMin[9] = 2;
commandArgumentMin[10] = 2;
commandArgumentMin[11] = 2;
commandArgumentMin[12] = 1;
commandArgumentMin[13] = 0;
commandArgumentMin[14] = 0;
commandArgumentMin[15] = 0;
commandArgumentMin[16] = 2;
commandArgumentMin[17] = 0;
commandArgumentMin[18] = 0;

hitEnter = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blink

tBlink = !tBlink;

if (tBlink)
    {
        Blink = "_";
    }
else
    {
        Blink = "";
    }
            
alarm[0] = room_speed * 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Keyboard String

lastKeyboardString = keyboard_string;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run Variables

clPlayerType();

if (hitEnter)
    {
        clGetResponse(currentText);
        currentText = "";
        keyboard_string = "";
        
        hitEnter = false;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Current Text + Previous Lines

var ctWidth, ctHeight, currentDrawText, xPos, yPos, Border;

var guiWidth = display_get_gui_width();
var guiHeight = display_get_gui_height();

draw_set_colour(c_black);
draw_set_alpha(0.45);
draw_rectangle(0, 0, guiWidth, guiHeight, false);

draw_set_alpha(1);

currentDrawText = "&gt;" + string(currentText) + Blink;
Border = 12;

xPos = Border;
yPos = guiHeight - Border;

draw_set_font(fontDebug);
ctWidth = string_width(currentDrawText);
ctHeight = string_height(currentDrawText);

draw_set_halign(fa_left);
draw_set_valign(fa_bottom);
draw_set_colour(c_dkgray);
draw_text(xPos + 1, yPos + 1, currentDrawText);
draw_set_colour(c_white);
draw_text(xPos, yPos, currentDrawText);

yPos -= (Border + ctHeight);

draw_set_font(fontDebug);

var listMax = 120;
var listPoint = 0;

var Size = ds_list_size(lineList);
for (var i = (Size - 1); i &gt;= 0; i --)
    {
        var Height = string_height(string(lineList[| i]));
        var Colour = colourList[| i];
        var Shadow = merge_colour(Colour, c_black, 0.65);
        var _xAdd = 0;
        
        if (Colour == -120)
            {
                var _Mix = sin_move(0, 1, 0.35, 0);
                Colour = merge_colour(c_red, c_maroon, _Mix);
                var Shadow = merge_colour(Colour, c_black, 0.65);
                
                var _xAdd = sin_move(0, 6, 1, 0);
            }
        
        if (Colour == -135)
            {
                var _coolColour = sin_move(0, 255, 3, 0);
                Colour = make_colour_hsv(_coolColour, 255, 255);
                var Shadow = merge_colour(Colour, c_black, 0.65);
                
                var _xAdd = sin_move(0, 12, 3, 0);
            }
        
        draw_set_colour(Shadow);
        draw_text(xPos + 1 + _xAdd, yPos, lineList[| i]);
        draw_set_colour(Colour);
        draw_text(xPos + _xAdd, yPos, lineList[| i]);
        
        yPos -= (Height) * 0.75;
        
        listPoint += 1;
        if (listPoint &gt;= listMax)
            {
                break;
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
