<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-300</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

Objects[0] = objWoodenWallH;
Objects[1] = objWoodenWallV;

objectAmount = array_length_1d(Objects) - 1;

objectSprite[0] = sprWoodenWallH;
objectSprite[1] = sprWoodenWallV;

for (var i = 0; i &lt; objectAmount+1; i ++)
    {
        var xOffset = sprite_get_xoffset(objectSprite[i]);
        var yOffset = sprite_get_yoffset(objectSprite[i]);
        var Width = sprite_get_width(objectSprite[i]);
        var Height = sprite_get_height(objectSprite[i]);
        bbx1[i] = (Width - xOffset) - Width+1;
        bby1[i] = (Height - yOffset) - Height+1;
        bbx2[i] = (Width + (Width - xOffset)) - Width-1;
        bby2[i] = (Height + (Height + yOffset)) - Height-1;
    }

currentObject = 0;

lockArray[0] = 8;
lockArray[1] = 16;
lockArray[2] = 32;
lockArray[3] = 64;
lockArray[4] = 128;
lockArray[5] = 256;
lockAmount = 128;
lockIndex = 4;

view_xview = room_width / 2 - view_wview / 2;
view_yview = room_height / 2 - view_hview / 2;

Pressed = false;

xRounded = 0;
yRounded = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run Variables

inMouse = point_in_rectangle(xRounded, yRounded, 0, 0, room_width, room_height);

Pressed = mouse_check_button_pressed(mb_left);
xRounded = round_n(mouse_x, lockAmount);
yRounded = round_n(mouse_y, lockAmount);

if (Pressed and inMouse)
    if !collision_rectangle(xRounded + bbx1[currentObject],yRounded +  bby1[currentObject],xRounded +  bbx2[currentObject],yRounded +  bby2[currentObject], Objects[currentObject], true, -1)
        instance_create(xRounded, yRounded, Objects[currentObject]);
    else
        show_message("There is already a " + object_get_name(Objects[currentObject]) + " there.");
        
var Change = (mouse_wheel_down() - mouse_wheel_up());
currentObject = wrap(currentObject + Change, 0, objectAmount);

var _lockChange = (keyboard_check_pressed(ord("P")) - keyboard_check_pressed(ord("O")));
lockIndex = wrap(lockIndex + _lockChange, 0, array_length_1d(lockArray) - 1);

lockAmount = lockArray[lockIndex];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw at Given Coordinates

draw_set_alpha(1);
draw_set_colour(c_black);
for(var i = 0; i &lt;= room_width; i += lockAmount)
    {
            draw_line_width(i, 0, i, room_height, 4);
    }
for(var i = 0; i &lt;=room_height; i += lockAmount)
    {
            draw_line_width(0, i, room_width, i, 4);
    }
    
draw_set_colour(c_blue);
draw_rectangle_width(0, 0, room_width, room_height, 32);

if (inMouse)
    {
        draw_set_colour(c_blue);
        draw_set_alpha(0.35);
        draw_circle(xRounded, yRounded, 16, false);
        draw_sprite_ext(objectSprite[currentObject], 0, xRounded, yRounded, 1, 1, 0, c_red, 0.35);
    }
    
draw_rectangle_width(xRounded+ bbx1[currentObject], yRounded+bby1[currentObject], xRounded+bbx2[currentObject], yRounded+bby2[currentObject], 6);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
