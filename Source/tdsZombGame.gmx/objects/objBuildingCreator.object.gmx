<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-300</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

objectInfo[0] = "objWoodenWallH|sprWoodenWallH|0|0|Horizontal Wall";
objectInfo[1] = "objWoodenWallV|sprWoodenWallV|0|1|Vertical Wall";
objectInfo[2] = "objWoodenDoorH|sprWoodenDoorH|0|0|Horizontal Door";
objectInfo[3] = "objWoodenDoorV|sprWoodenDoorV|0|1|Vertical Door";
objectInfo[4] = "objCorner|sprCorner|0|2|Corner";
objectInfo[5] = "objCrate|sprCrate|0|2|Crate";
objectInfo[6] = "objTable|sprTable|0|2|Table";
objectInfo[7] = "objFirepit|sprFirepit|0|2|Firepit";
objectInfo[8] = "objTile|zoneTiles|0|3|Concrete Floor"

objectAmount = array_length_1d(objectInfo) - 1;

for (var i = 0; i &lt; objectAmount+1; i ++)
    {
        var _List = string_parse(objectInfo[i], "|", true);
        
        Objects[i] = asset_get_index(_List[| 0]);
        objectSprite[i] = asset_get_index(_List[| 1]);
        objectIndex[i] = real(_List[| 2]);
        objectOrientation[i] = real(_List[| 3]);
        readableName[i] = _List[| 4];
    }

for (var i = 0; i &lt; objectAmount+1; i ++)
    {
        var xOffset = sprite_get_xoffset(objectSprite[i]);
        var yOffset = sprite_get_yoffset(objectSprite[i]);
        var Width = sprite_get_width(objectSprite[i]);
        var Height = sprite_get_height(objectSprite[i]);
        bbx1[i] = (Width - xOffset) - Width+1;
        bby1[i] = (Height - yOffset) - Height+1;
        bbx2[i] = (Width + (Width - xOffset)) - Width-1;
        bby2[i] = (Height + (Height - yOffset)) - Height-1;
    }

currentObject = 0;

lockArray[0] = 8;
lockArray[1] = 16;
lockArray[2] = 32;
lockArray[3] = 64;
lockArray[4] = 128;
lockArray[5] = 256;
lockAmount = 128;
lockIndex = 4;

validSpace = false;
inMouse = false;

messageTime = 0;
lastMessage = "";

view_xview = room_width / 2 - view_wview / 2;
view_yview = room_height / 2 - view_hview / 2;

Pressed = false;

xRounded = 0;
yRounded = 0;

placedInstances[0] = noone;
placedInstancesCount = 0;

application_surface_draw_enable(false);

if !directory_exists(buildingDirectory)
    directory_create(buildingDirectory);

deletionMode = 0;
    
//instance_create(0, 0, objBuildingCreatorBackground);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run Variables

if instance_exists(objCommandline)
    exit;

Deleting = mouse_check_button(mb_right);
Collided = false;
var _Check = false;

inMouse = (rectangle_in_rectangle(xRounded + bbx1[currentObject], yRounded + bby1[currentObject], xRounded + bbx2[currentObject], yRounded + bby2[currentObject], 1, 1, room_width, room_height) == 1);
if !objectOrientation[currentObject] != -1
    {
        for (var i = 0; i &lt; objectAmount; i ++)
            {
                if (objectOrientation[i] == objectOrientation[currentObject])
                    {
                        var _Check = collision_rectangle(xRounded + bbx1[currentObject],yRounded +  bby1[currentObject],xRounded +  bbx2[currentObject],yRounded +  bby2[currentObject], Objects[i], true, -1);
                        if _Check &gt; 0 break;
                    }
            }
    }

var Check2 = collision_rectangle(xRounded + bbx1[currentObject],yRounded +  bby1[currentObject],xRounded +  bbx2[currentObject],yRounded +  bby2[currentObject], Objects[currentObject], true, -1) 

validSpace = !(_Check or Check2 or !inMouse);

if (Deleting)
    {
        if (keyboard_check(ord("Q")))
            deletionMode = 1;
        else
            deletionMode = 0;

        if (deletionMode != -1)
            for (var i = 0; i &lt; placedInstancesCount; i ++)
                {
                    var _ID = placedInstances[i];
                    if (instance_exists(_ID))
                        {
                            if (objectOrientation[_ID.createdObject] == 3)
                                {
                                    if (deletionMode != 1)
                                        continue;
                                }
                        with (_ID)
                            if (rectangle_in_rectangle(mouse_x - 2, mouse_y - 2, mouse_x + 2, mouse_y + 2, bbox_left, bbox_top, bbox_right, bbox_bottom) &gt; 0)
                                instance_destroy();
                        }
                }
    }
else
    {
        
        Pressed = mouse_check_button_pressed(mb_left) or (keyboard_check(vk_shift) and mouse_check_button(mb_left));
        xRounded = round_n(mouse_x, lockAmount);
        yRounded = round_n(mouse_y, lockAmount);
        
        if (Pressed)
            {       
                if validSpace
                    {
                        var _ID = instance_create(xRounded, yRounded, Objects[currentObject]);
                        _ID.sprite_index = objectSprite[currentObject];
                        _ID.image_index = objectIndex[currentObject];
                        _ID.createdObject = currentObject;
                        placedInstances[placedInstancesCount] = _ID;
                        placedInstancesCount += 1;
                    }
                else
                    {
                        lastMessage = "Invalid place.";
                        messageTime = room_speed;
                    }
            }       
        var Change = (mouse_wheel_down() - mouse_wheel_up());
        currentObject = wrap(currentObject + Change, 0, objectAmount);
        
        var _lockChange = (keyboard_check_pressed(ord("P")) - keyboard_check_pressed(ord("O")));
        lockIndex = wrap(lockIndex + _lockChange, 0, array_length_1d(lockArray) - 1);
        
        lockAmount = lockArray[lockIndex];
    }
    
if (keyboard_check(vk_control))
    if (keyboard_check_pressed(ord("S")))
        gameBuildingSave();
    if (keyboard_check_pressed(ord("L")))
        gameBuildingLoad();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Surface

display_set_gui_size(surface_get_width(application_surface), surface_get_height(application_surface));
draw_surface_ext(application_surface, 0, 0, 1, 1, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw at Given Coordinates

draw_set_colour(c_black);
draw_set_alpha(1);
draw_rectangle(view_xview, view_yview, view_xview + view_wview, 0, 0);
draw_rectangle(view_xview, view_yview, 0, view_xview + view_hview, 0);
draw_rectangle(view_xview, room_height, view_xview + view_wview, view_yview + view_hview, 0);
draw_rectangle(room_width, view_yview, view_xview + view_wview, view_yview + view_hview, 0);

if instance_exists(objCommandline)
    exit;

var majorColour = c_white;
var minorColour = c_gray;

colColour = merge_colour(c_aqua, c_fuchsia, 1 - validSpace);

draw_set_alpha(1);
draw_set_colour(c_black);
for(var i = 0; i &lt;= room_width; i += lockAmount)
    draw_line_width(i, 0, i, room_height, 4);
for(var i = 0; i &lt;=room_height; i += lockAmount)
    draw_line_width(0, i, room_width, i, 4);
    
draw_set_colour(c_blue);
draw_rectangle_width(0, 0, room_width, room_height, 12);

if (Deleting)
    {
        draw_set_colour(c_red);
        draw_set_alpha(0.5);
        draw_circle(mouse_x, mouse_y, sin_move(12, 24, 2, 0), false);
    }
else
    {
        if (inMouse)
            {
                draw_set_colour(c_blue);
                draw_set_alpha(0.35);
                draw_circle(xRounded, yRounded, 16, false);
                draw_sprite_ext(objectSprite[currentObject], objectIndex[currentObject], xRounded, yRounded, 1, 1, 0, colColour, 0.85);
                
                draw_set_alpha(1);
                draw_set_halign(fa_center);
                draw_set_valign(fa_top);
                draw_set_colour(minorColour);
                draw_text(xRounded + 2, yRounded + 128, readableName[currentObject]);
                draw_set_colour(majorColour);
                draw_text(xRounded, yRounded + 128, readableName[currentObject]);
            }
        draw_rectangle_width(xRounded+ bbx1[currentObject], yRounded+bby1[currentObject], xRounded+bbx2[currentObject], yRounded+bby2[currentObject], 6);
    }

draw_set_alpha(1);
draw_set_colour(c_white);

if (messageTime &gt; 0)
    {
        var textSpace = view_wview - room_width;
        draw_set_halign(fa_right);
        draw_set_valign(fa_bottom);
        draw_set_colour(minorColour);
        draw_text_transformed(view_xview + view_wview - 6, view_yview + view_hview - 6, lastMessage, 2, 2, 0);
        draw_set_colour(merge_colour(majorColour, c_black, sin_move(0, 1, 0.5, 0)));
        draw_text_transformed(view_xview + view_wview - 4, view_yview + view_hview - 4, lastMessage, 2, 2, 0);
        messageTime = max(messageTime - 1, 0);
    }
    
if (Deleting)
    {
        if (deletionMode == 0)
            var _infoString = "Deleting Objects.#Hold 'Q' to delete Tiles.";
        else if (deletionMode == 1)
            var _infoString = "Deleting Tiles.";
    }
else
    var _infoString = "Current Object: " + object_get_name(Objects[currentObject]);
    
var _instanceString = string(instance_count);

draw_set_font(fontBuildingEditor);
draw_set_halign(fa_left);
draw_set_valign(fa_bottom);
draw_set_colour(minorColour);
draw_text_transformed(view_xview + 6, view_yview + view_hview - 6, _infoString, 2, 2, 0);
draw_set_colour(majorColour);
draw_text_transformed(view_xview + 4, view_yview + view_hview - 4, _infoString, 2, 2, 0);
draw_set_valign(fa_top);
draw_set_colour(minorColour);
draw_text_transformed(view_xview + 6, view_yview + 6, _instanceString, 2, 2, 0);
draw_set_colour(majorColour);
draw_text_transformed(view_xview + 4, view_yview + 4, _instanceString, 2, 2, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
